package org.Dungeons;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.EntityType;

import com.PluginBase.MathHelper;

public abstract class Dungeon {

	private Main main;
	private List<Location> pointOfInterestLocations = new ArrayList<>();
	private Selector selector = new Selector();
	
	private Material[] whitelist;
	private Map<Material, Double> groundMaterials, wallMaterials;
	private Map<PointOfInterest, Double> pointsOfInterest;
	private Map<BossMob, Double> bossMobs;
	private Map<EntityType, Double> entityTypes;

	public int dungeonSize, corridorLength, bossMobPossibility, entityPossibility, pointOfInterestPossibility;

	public Dungeon(Main main) {
		this.setMain(main);
	}

	public abstract void setValues();
	public abstract void generate(Location dungeonLocation);

	public void generatePointOfInterest(Location location) {
		if (MathHelper.getInstance().hasChanceHit(this.pointOfInterestPossibility)) {
			this.pointOfInterestLocations.add(location);
		}
	}
	
	public void generatePointsOfInterest() {
		for (Location location : this.pointOfInterestLocations) {
			PointOfInterest pointOfInterest = (PointOfInterest) this.selector.selectRandomObjectFromWeightedList(getPointsOfInterest());
			//Chat.getInstance().sendErrorToConsole("Dungeons", "#-", "Generating point of interest: " + pointOfInterest.getClass().getSimpleName());
			pointOfInterest.generatePointOfInterest(location);
		}
		
		// Spawn a boss mob at a random location
		if (MathHelper.getInstance().hasChanceHit(this.bossMobPossibility)) {
			Random random = new Random();
			Location location = this.pointOfInterestLocations.get(random.nextInt(this.pointOfInterestLocations.size()));
			BossMob bossMob = (BossMob) this.selector.selectRandomObjectFromWeightedList(getBossMobs());
			bossMob.spawn(getMain(), location);
		}
	}

	/**
	 * Check if a given material is on the whitelist of materials
	 * 
	 * @param material
	 *            The material that should be checked
	 * @return If the material is on the whitelist
	 */
	public boolean isMaterialOnWhitelist(Material material) {
		for (Material whitelistedMaterial : this.whitelist) {
			if (whitelistedMaterial == material) {
				return true;
			}
		}
		return false;
	}

	/**
	 * @return the whitelist
	 */
	public Material[] getWhitelist() {
		return this.whitelist;
	}

	/**
	 * @param whitelist
	 *            the whitelist to set
	 */
	public void setWhitelist(Material[] whitelist) {
		this.whitelist = whitelist;
	}

	/**
	 * @return the groundMaterials
	 */
	public Map<Material, Double> getGroundMaterials() {
		return this.groundMaterials;
	}

	/**
	 * @param groundMaterials
	 *            the groundMaterials to set
	 */
	public void setGroundMaterials(Map<Material, Double> groundMaterials) {
		this.groundMaterials = groundMaterials;
	}

	/**
	 * @return the wallMaterials
	 */
	public Map<Material, Double> getWallMaterials() {
		return this.wallMaterials;
	}

	/**
	 * @param wallMaterials
	 *            the wallMaterials to set
	 */
	public void setWallMaterials(Map<Material, Double> wallMaterials) {
		this.wallMaterials = wallMaterials;
	}

	/**
	 * @return the pointsOfInterest
	 */
	public Map<PointOfInterest, Double> getPointsOfInterest() {
		return this.pointsOfInterest;
	}

	/**
	 * @param pointsOfInterest
	 *            the pointsOfInterest to set
	 */
	public void setPointsOfInterest(Map<PointOfInterest, Double> pointsOfInterest) {
		this.pointsOfInterest = pointsOfInterest;
	}

	/**
	 * @return the bossMobs
	 */
	public Map<BossMob, Double> getBossMobs() {
		return this.bossMobs;
	}

	/**
	 * @param bossMobs
	 *            the bossMobs to set
	 */
	public void setBossMobs(Map<BossMob, Double> bossMobs) {
		this.bossMobs = bossMobs;
	}

	/**
	 * @return the entityTypes
	 */
	public Map<EntityType, Double> getEntityTypes() {
		return this.entityTypes;
	}

	/**
	 * @param entityTypes
	 *            the entityTypes to set
	 */
	public void setEntityTypes(Map<EntityType, Double> entityTypes) {
		this.entityTypes = entityTypes;
	}

	/**
	 * @return the main
	 */
	public Main getMain() {
		return this.main;
	}

	/**
	 * @param main
	 *            the main to set
	 */
	public void setMain(Main main) {
		this.main = main;
	}
}
